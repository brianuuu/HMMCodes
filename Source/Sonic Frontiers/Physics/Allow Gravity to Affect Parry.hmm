Code "Allow Gravity to Affect Parry" in "Physics" by "Hyper" does
/*
Applies gravity to air parry after a short period of time, based on the current difficulty setting.

The air parry durations are as follows;
- Easy: 3 seconds
- Normal: 1.5 seconds
- Hard: 1 second
- Extreme: 0.8 seconds
*/
//
    #lib "BlackboardStatus"
    #lib "DeltaTime"
    #lib "GameManager"
    #lib "GameMode"
    #lib "Memory"
    #lib "Player"

    #import "BlackboardStatus"
    #import "GOComponents"
    #import "Services"
    #import "States"

    #load "System.Numerics.dll"

    using System.Collections.Generic;
    using System.Numerics;

    const float _normalGravity = -9.81f;
    const float _lowGravity = -3.27f;

    static bool _isLanded = false;

    static int _sfxHandle = 0;

    static float _gravity = -9.81f;
    static float _mass = 30.0f;

    static float _parryTime = 0.0f;

    static Dictionary<DifficultySetting, float> _parryDurations = new()
    {
        { DifficultySetting.Easy, 3.0f },
        { DifficultySetting.Normal, 1.5f },
        { DifficultySetting.Hard, 1.0f },
        { DifficultySetting.Extreme, 0.8f }
    };

    static void PlayEffects()
    {
        if (_sfxHandle != 0)
            return;
        
        _sfxHandle = Player.Sound.PlaySound("sn_relative_wind");

        Player.Effect.PlayEffect("AirParryEffect", "ef_ft_dash_ge01");
    }

    static void StopEffects()
    {
        if (_sfxHandle == 0)
            return;
        
        fixed (int* p_sfxHandle = &_sfxHandle)
            Player.Sound.StopSound(p_sfxHandle);

        _sfxHandle = 0;

        Player.Effect.StopEffect("AirParryEffect");
    }
//
{
    if (GameMode.GetName() == "GameModeCyberStage")
    {
        if (Memory.TryGetPointer<LevelInfo>(GameManager.GetService<LevelInfo>(), out var out_pLevelInfo) && out_pLevelInfo->pStageData != null)
        {
            if (out_pLevelInfo->pStageData->CyberMode == StageInfo.CyberModes.LowGravity)
            {
                _gravity = _lowGravity;
            }
            else
            {
                _gravity = _normalGravity;
            }
        }
    }
    else
    {
        _gravity = _normalGravity;
    }

    if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateParry)
    {
        StopEffects();

        _parryTime = 0.0f;

        return;
    }

    // HACK: don't update when paused.
    if (GameManager.GetGameObject("MainMenu") != null || GameManager.GetGameObject("MapMenu") != null)
        return;

    if (!Memory.TryGetPointer<BlackboardStatus.Data>(BlackboardStatus.Get(), out var out_pBlackboardStatus))
        return;

    if (!Memory.TryGetPointer<GOCPlayerKinematicParams>(Player.Kinematics.Get(), out var out_pKinematics))
        return;

    if (BlackboardStatus.IsSuper())
        return;
    
    var deltaTime = DeltaTime.GetDeltaTime();
    
    _parryTime += deltaTime;

    if (Player.Status.IsGrounded())
    {
        out_pKinematics->Velocity = Vector3.Zero;

        StopEffects();

        if (!_isLanded)
        {
            Player.Animation.SetAnimation("LANDING_BATTLE");
            _isLanded = true;
        }
    }
    else
    {
        _isLanded = false;

        var duration = _parryDurations[out_pBlackboardStatus->Difficulty];
        var force = _mass * _gravity;
        var accel = force / _mass;

        if (_parryTime <= duration)
        {
            var easeGravityFactor = Math.Min(_parryTime / duration, 1.0f);
            var easeGravityCubic = easeGravityFactor * easeGravityFactor * easeGravityFactor;

            PlayEffects();

            out_pKinematics->Velocity = new Vector3(0.0f, easeGravityCubic * accel * deltaTime, 0.0f);
        }
        else
        {
            out_pKinematics->Velocity += new Vector3(0.0f, accel * deltaTime, 0.0f);
            
            StopEffects();
        }
        
        out_pKinematics->Position += out_pKinematics->Velocity * deltaTime;
    }
}