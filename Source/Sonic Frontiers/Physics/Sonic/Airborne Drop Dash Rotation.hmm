Code "Airborne Drop Dash Rotation" in "Physics/Sonic" by "Hyper" does "Allows Sonic to rotate whilst airborne during a Drop Dash."
//
    #lib "DeltaTime"
    #lib "Memory"
    #lib "Player"
    #lib "VectorHelpers"

    #import "GOComponents"

    #load "System.Numerics.dll"

    using System.Numerics;

    const float _airForce = 10.0f;
    const float _airAccel = 100.0f;
    const float _turnSpeed = 3.0f;

    static float _lastGroundedMagnitude = 0.0f;
//
{
    if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDropDash)
        return;

    if (Player.Status.IsSideView())
        return;

    if (Player.Status.IsGrounded())
    {
        _lastGroundedMagnitude = Player.Kinematics.GetHorizontalMagnitude();
        return;
    }
    
    if (!Memory.TryGetPointer<GOCPlayerKinematicParams>(Player.Kinematics.Get(), out var out_pKinematics))
        return;

    var worldInput = out_pKinematics->WorldInput;

    if (worldInput.Length() <= 0.0f)
        return;
    
    var dt = DeltaTime.GetDeltaTime();
    var forward = VectorHelpers.GetForward(out_pKinematics->Rotation);

    // Rotation
    {
        var worldInputAngle = VectorHelpers.SignedAngle(forward, Vector3.Normalize(worldInput), Vector3.UnitY);
        var rotation = (float)Math.Min(Math.Abs(worldInputAngle), _turnSpeed * dt);

        // Apply rotation in stick direction.
        rotation *= (float)Math.Sign(worldInputAngle);

        var rotationDelta = Quaternion.CreateFromAxisAngle(Vector3.UnitY, rotation);

        out_pKinematics->Rotation = Quaternion.Normalize(Quaternion.Concatenate(out_pKinematics->Rotation, rotationDelta));
    }

    // Velocity
    {
        var forwardVelocity = forward * _airAccel;
        var nrmVelocity = Vector3.Normalize(out_pKinematics->Velocity);

        if (_lastGroundedMagnitude < Player.Kinematics.GetHorizontalMagnitude())
            forwardVelocity = forward * nrmVelocity * dt;
        
        var force = (forwardVelocity - out_pKinematics->Velocity) * _airForce * dt;

        out_pKinematics->Velocity.X += force.X;
        out_pKinematics->Velocity.Z += force.Z;

        // Decelerate over time.
        out_pKinematics->Velocity -= nrmVelocity * Player.Kinematics.GetHorizontalMagnitude() * dt;
    }
}