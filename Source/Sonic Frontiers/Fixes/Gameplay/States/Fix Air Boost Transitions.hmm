Code "Fix Air Boost Transitions" in "Fixes/Gameplay/States" by "Hyper & Weezley" does
/*
Fixes state transitions for the air boost state.

Notes;
- This fixes being unable to perform another air boost after previously using it before a homing attack, stomp or spring.
*/
//
    #include "BlackboardStatus" noemit

    #lib "Bitwise"
    #lib "BlackboardStatus"
    #lib "Globals"
    #lib "Player"
    #lib "HMM"

    using System.Collections.Generic;

    static List<Sonic.StateID> _allowedStates = new()
    {
        Sonic.StateID.StateHomingFinished,
        Sonic.StateID.StateSpringJump,
        Sonic.StateID.StateStompingBounce,
        Sonic.StateID.StateStompingFlip,
        Sonic.StateID.StateUpDownPole,
        Sonic.StateID.StateUpDownPoleDamage
    };

    static List<Sonic.StateID> _disallowedStates = new()
    {
        Sonic.StateID.StateAirBoost,
        Sonic.StateID.StateAuraTrain,
        Sonic.StateID.StateGrindStep,
        Sonic.StateID.StateJumpBoardLaunch,
        Sonic.StateID.StateCaught,
        Sonic.StateID.StateSpinBoost
    };

    static List<Sonic.StateID> _noAirBoostStates = new()
    {
        Sonic.StateID.StateGrindStep,
        Sonic.StateID.StateHoldStand,
        Sonic.StateID.StateHangPole,
        Sonic.StateID.StateUpDownPole,
        Sonic.StateID.StateUpDownPoleDamage
    };

    static bool _isInitialised = false;
    static bool _isRestoredAirBoost = false;
    static bool _isNoAirBoost = false;
    static bool _isNoCycloneStart = false;
    static bool _isNoSpinBoostStart = false;
//
{
    if (!_isInitialised)
    {
        Globals.Add("Fix Air Boost Transitions", true);

        foreach (var code in HMM.GetCodes())
        {
            switch (code)
            {
                case "Animation/Tails/Disable Cyclone Transition":
                    _isNoCycloneStart = true;
                    break;

                case "Animation/Amy/Disable Card Spin Boost Transition":
                    _isNoSpinBoostStart = true;
                    break;
            }
        }

        Sonic.StateID NotifyAirBoostReset(Sonic.StateID in_stateId, Sonic.StateID[] in_stateStackTrace)
        {
            // Reset flag for StateAirBoost or when the player is grounded.
            if (_disallowedStates.Contains(in_stateId) || Player.Status.IsGrounded())
            {
                _isRestoredAirBoost = false;
                return in_stateId;
            }

            foreach (var state in _allowedStates)
            {
                if (state == in_stateId)
                    _isRestoredAirBoost = true;
            }

            _isNoAirBoost = _noAirBoostStates.Contains(in_stateId);

            return in_stateId;
        }

        Player.State.AddStateNotifyAction<Sonic.StateID>(NotifyAirBoostReset);

        _isInitialised = true;
    }

    if (!Globals.GetFlag("Fix Air Boost Transitions"))
        return;

    var pStatePluginDiving = Player.State.GetStatePlugin("StatePluginDiving");

    if (BlackboardStatus.IsSuper()   ||
        pStatePluginDiving != null   ||
        IS_STATE_FLAG(IsDiving)      ||
        IS_STATE_FLAG(IsDivingBoost) ||
        IS_STATE_FLAG(IsBoarding)    ||
        IS_WORLD_FLAG(IsDead))
    {
        _isRestoredAirBoost = false;
    }

    if (_isRestoredAirBoost && !_isNoAirBoost && !Player.Status.IsGroundedSpecial() && Player.Input.IsPressed(Player.InputActionType.PlayerBoost))
    {
        // Exit into Air Boost depending on current character.
        if (IS_WORLD_FLAG(IsPowerBoost))
        {
            if (Player.GetPlayerType() == Player.PlayerType.Tails)
            {
                Player.State.SetState<Tails.StateID>(_isNoCycloneStart ? Tails.StateID.StateAirBoostCyclone : Tails.StateID.StateCycloneAppear);
            }
            else if (Player.GetPlayerType() == Player.PlayerType.Amy)
            {
                Player.State.SetState<Amy.StateID>(_isNoSpinBoostStart ? Amy.StateID.AmyStateTarotBoost : Amy.StateID.AmyStateTarotBuildAir);
            }
            else if (Player.GetPlayerType() == Player.PlayerType.Knuckles)
            {
                Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.KnucklesStateDrillBoostAir)
            }
            else
            {
                Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAirBoost);
            }
        }
        else
        {
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAirBoost);
        }

        _isRestoredAirBoost = false;
    }
}