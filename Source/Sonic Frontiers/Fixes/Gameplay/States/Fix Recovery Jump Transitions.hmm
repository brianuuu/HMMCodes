Code "Fix Recovery Jump Transitions" in "Fixes/Gameplay/States" by "Hyper" does
/*
Fixes state transitions for the recovery jump state.

Notes;
- This allows Knuckles to glide after performing a recovery jump whilst holding A.
- This allows Tails to fly after performing a recovery jump whilst holding A.
*/
//
    #lib "DeltaTime"
    #lib "Globals"
    #lib "Player"

    static bool _isInitialised = false;

    static float _recoveryJumpTimer = 0.0f;
//
{
    if (!_isInitialised)
    {
        Globals.Add("Fix Recovery Jump Transitions", true);
        _isInitialised = true;
    }

    if (!Globals.GetFlag("Fix Recovery Jump Transitions"))
        return;

    switch (Player.GetPlayerType())
    {
        case Player.PlayerType.Knuckles:
        {
            // Fix Knuckles being unable to glide out of StateRecoveryJump.
            if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateRecoveryJump)
            {
                _recoveryJumpTimer += DeltaTime.GetDeltaTime();

                if (_recoveryJumpTimer > 0.65f && Player.Input.IsDown(Player.InputActionType.PlayerJump))
                {
                    Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.StateGliding);
                    _recoveryJumpTimer = 0.0f;
                }
            }

            break;
        }

        case Player.PlayerType.Tails:
        {
            // Fix Tails being unable to fly out of StateRecoveryJump.
            if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateRecoveryJump)
            {
                _recoveryJumpTimer += DeltaTime.GetDeltaTime();

                if (_recoveryJumpTimer > 0.65f && Player.Input.IsDown(Player.InputActionType.PlayerJump))
                {
                    Player.State.SetState<Tails.StateID>(Tails.StateID.StateTailsFly);
                    _recoveryJumpTimer = 0.0f;
                }
            }
            
            break;
        }
    }
}