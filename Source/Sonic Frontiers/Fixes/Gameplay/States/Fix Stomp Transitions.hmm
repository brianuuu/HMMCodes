Code "Fix Stomp Transitions" in "Fixes/Gameplay/States" by "Hyper & MyorraTheSniper" does
/*
Fixes state transitions for the stomp states.

Notes;
- This fixes the stomp attack only resetting once you hit the ground, allowing you to perform multiple stomps whilst still airborne.
- This fixes Sonic being unable to stomp again after performing a stomp bounce.
- This fixes Sonic being unable to attack after performing a stomp bounce.
- This disables Sonic flipping after stomping onto specific types of collision.
- This disables Sonic flipping after using the stomp shockwave on enemies.
- This allows Knuckles to cancel stomp to start gliding by holding A.
*/
//
    #lib "Globals"
    #lib "Player"

    static bool _isInitialised = false;
//
{
    if (!_isInitialised)
    {
        Globals.Add("Fix Stomp Transitions", true);

        byte[] asm = Assemble($"lea edx, [r8 + {(int)Sonic.StateID.StateStompingLand}]");

        // Disable stomp flip for collision types (e.g. Asura body).
        WriteProtected<byte>
        (
            /* v1.41: 0x14096EBDE */
            ScanSignature
            (
                "\x41\x8D\x50\x3B\xE8\xCC\xCC\xCC\xCC\x48\x8D\x4D\x17\xE8\xCC\xCC\xCC\xCC\xB0\x01\xE9\x4C\x02\x00\x00",
                "xxxxx????xxxxx????xxxxxxx"
            ),

            asm
        );

        // Disable stomp flip for stomp shockwave kill.
        {
            /* v1.41: 0x14B938C8C */
            var sig = ScanSignature
            (
                "\x41\x8D\x50\x3B\xE8\xCC\xCC\xCC\xCC\x48\x8D\x4C\x24\x20\xC6\x87\xB8\x00\x00\x00\x01",
                "xxxxx????xxxxxxxxxxxx"
            );

            WriteProtected<byte>(sig, asm);
            WriteNop(sig + 14, 7);
        }

        // Fix Sonic being unable to stomp again after stomping at least once.
        WriteNop
        (
            /* v1.41: 0x1409D3A9B */
            ScanSignature
            (
                "\x74\x98\x45\x33\xC0",
                "xxxxx"
            ),

            2
        );

        _isInitialised = true;
    }
    
    if (!Globals.GetFlag("Fix Stomp Transitions"))
        return;

    switch (Player.GetPlayerType())
    {
        case Player.PlayerType.Sonic:
        {
            if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump)
            {
                // Fix Sonic being unable to stomp again after performing a stomp bounce.
                if (Player.Input.IsPressed(Player.InputActionType.PlayerStomping))
                    Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateStompingDown);
                        
                // Fix Sonic being unable to attack after performing a stomp bounce.
                if (Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
                    Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFall);
            }

            break;
        }

        case Player.PlayerType.Knuckles:
        {
            // Fix Knuckles being unable to glide out of KnucklesStateStompingDown.
            if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.KnucklesStateStompingDown)
            {
                if (Player.Input.IsDown(Player.InputActionType.PlayerJump))
                    Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.StateGliding);

                Player.State.Redirect<Knuckles.StateID>(Knuckles.StateID.StateJump, Knuckles.StateID.StateGliding);
                Player.State.Redirect<Knuckles.StateID>(Knuckles.StateID.StateDoubleJump, Knuckles.StateID.StateGliding);
            }
            else
            {
                Player.State.Restore<Knuckles.StateID>(Knuckles.StateID.StateJump);
                Player.State.Restore<Knuckles.StateID>(Knuckles.StateID.StateDoubleJump);
            }

            break;
        }
    }
}