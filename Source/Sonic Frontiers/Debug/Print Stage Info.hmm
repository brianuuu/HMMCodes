Code "Print Stage Info" in "Debug" by "Hyper" does
/*
Prints information about the stage currently being loaded once.

This code requires the debug console to be enabled in Hedge Mod Manager to have any effect.
*/
//
    #lib "GameManager"

    #import "Collections"
    #import "Services"

    using System.Collections.Generic;

    static string _lastStageName = string.Empty;

    /* Anything not in this list can get away with just
       being made lowercase instead. */
    static Dictionary<string, string> _flagNames = new()
    {
        { "DeleteFallDeadCollision", "deleteFalldeadCol"  },
        { "DeleteAirWallCollision",  "deleteAirwallCol"   },
        { "DeleteGrindRail",         "deleteGrindrail"    },
        { "ChangeNewCollision",      "changeNewCol"       },
        { "LowGravity",              "low-gravity"        },
        { "TimeExtend",              "time-extend"        },
        { "SpeedScale",              "speed-scale"        },
        { "MaxSpeedChallenge",       "maxspeed-challenge" }
    };

    static void PrintFlags(long in_flags, Type in_enumType)
    {
        var result = string.Empty;

        foreach (var @enum in Enum.GetValues(in_enumType))
        {
            if ((in_flags & (1L << (int)@enum)) != 0)
            {
                if (!string.IsNullOrEmpty(result))
                    result += " | ";

                var name = @enum.ToString();

                if (_flagNames.ContainsKey(name))
                {
                    result += _flagNames[name];
                }
                else
                {
                    result += name.ToLower();
                }
            }
        }

        if (string.IsNullOrEmpty(result))
        {
            Console.Write("N/A");
        }
        else
        {
            Console.Write(result);
        }

        Console.Write("\r\n");
    }

    static string GetCyberModeName(byte in_flags)
    {
        if (in_flags == 0)
            return "N/A";
        
        var result = ((StageInfo.CyberModes)in_flags).ToString();

        if (_flagNames.ContainsKey(result))
            return _flagNames[result];

        return result.ToLower();
    }

    static void PrintSectors(ObjectMoveArray<byte> in_sectors)
    {
        foreach (var sector in in_sectors)
            Console.Write($"{sector:X2} ");

        Console.Write("\r\n");
    }

    static void PrintRanks(StageInfo.StageData.RankTimes in_ranks)
    {
        Console.Write($"S = {in_ranks.S}, A = {in_ranks.A}, B = {in_ranks.B}, C = {in_ranks.C}\r\n");
    }
//
{
    if (!Memory.TryGetPointer<LevelInfo>(GameManager.GetService<LevelInfo>(), out var out_pLevelInfo))
        return;

    if (!Memory.TryGetPointer<StageInfo.StageData>(out_pLevelInfo->pStageData, out var out_pStageData))
        return;

    var stageName = out_pStageData->Name.ToString();

    if (stageName == _lastStageName)
        return;
    
    Console.WriteLine($"[Stage] name ------------------- : {stageName}");
    Console.WriteLine($"[Stage] scene_param_name ------- : {out_pStageData->SceneParamName.ToString()}");
    Console.WriteLine($"[Stage] stage ------------------ : {out_pStageData->Location.ToString()}");
    Console.WriteLine($"[Stage] cyber_name ------------- : {out_pStageData->CyberName.ToString()}");
    Console.WriteLine($"[Stage] stage_no --------------- : {out_pStageData->StageIndex}");
    Console.WriteLine($"[Stage] cyber_stage_no --------- : {out_pStageData->CyberStageIndex}");
    Console.WriteLine($"[Stage] world_no --------------- : {out_pStageData->WorldIndex}");
    Console.WriteLine($"[Stage] default_scene_param_no - : {out_pStageData->DefaultSceneParamIndex}");

    Console.Write($"[Stage] attrs ------------------ : ");
    PrintFlags(out_pStageData->AttributeFlags, typeof(StageInfo.Attributes));

    Console.Write($"[Stage] mission ---------------- : ");
    PrintFlags(out_pStageData->MissionFlags, typeof(StageInfo.Missions));

    Console.Write($"[Stage] static_sectors --------- : ");
    PrintSectors(out_pStageData->StaticSectors);

    Console.Write($"[Stage] dynamic_sectors -------- : ");
    PrintSectors(out_pStageData->DynamicSectors);

    Console.WriteLine($"[Stage] timelimit -------------- : {out_pStageData->TimeLimit}");
    Console.WriteLine($"[Stage] deadheight ------------- : {out_pStageData->DeadHeight}");
    Console.WriteLine($"[Stage] noisetime -------------- : {out_pStageData->NoiseTime}");
    Console.WriteLine($"[Stage] ring_mission ----------- : {out_pStageData->RingMissionThreshold}");
    Console.WriteLine($"[Stage] cyber_mode ------------- : {GetCyberModeName((byte)out_pStageData->CyberMode)}");

    Console.Write($"[Stage] rank ------------------- : ");
    PrintRanks(out_pStageData->Ranks);

    Console.Write($"[Stage] rank_veryhard ---------- : ");
    PrintRanks(out_pStageData->RanksVeryHard);

    Console.Write($"[Stage] rank_challenge --------- : ");
    PrintRanks(out_pStageData->RanksChallenge);

    Console.Write($"[Stage] rank_challenge_all ----- : ");
    PrintRanks(out_pStageData->RanksChallengeAll);

    _lastStageName = stageName;
}