Code "Checkpoint Creator" in "Cheats" by "Hyper" does
/*
Allows you to create virtual checkpoints anywhere and restore them.

Controller Layout;
- LB + RB + LS + RS (for 1.5 seconds) - create checkpoint from position
- LB + RB + LS + RS - restore position from checkpoint

Keyboard Layout;
- Plus - create checkpoint from position
- Minus - restore position from checkpoint

Notes;
- It is recommended to have parry unlocked when using the controller layout.
*/
//
    #lib "BlackboardStatus"
    #lib "GameMode"
    #lib "Lua"
    #lib "Memory"
    #lib "Player"
    #lib "Time"
    #lib "Win32"

    #import "GOComponents"

    #load "System.Numerics.dll"

    using System.Numerics;

    static string _lastGameModeName = string.Empty;

    static Vector3 _checkpointPosition = Vector3.Zero;
    static Quaternion _checkpointRotation = Quaternion.Identity;

    static bool _isRecentRespawn = false;
    static bool _isInputBuffered = false;

    static float _inputTimer = 0.0f;
    static float _inputTimerThreshold = 1.5f;
//
{
    if (_lastGameModeName != GameMode.GetName())
    {
        Lua.Call("LoadLevel", "zev_sonic_pow_up");

        _checkpointPosition = Vector3.Zero;
        _checkpointRotation = Quaternion.Identity;

        _lastGameModeName = GameMode.GetName();
    }

    if (!Win32.IsGameForegroundWindow())
        return;

    if (!Memory.TryGetPointer(Player.Kinematics.Get(), out GOCPlayerKinematicParams* out_pKinematics))
        return;

    bool isMinusKeyDown = (GetAsyncKeyState(Keys.OemMinus) & 0x8000) != 0;
    bool isPlusKeyDown = (GetAsyncKeyState(Keys.Oemplus) & 0x8000) != 0;

    if (isMinusKeyDown ||
        (Player.Input.IsDown(Player.InputActionType.PlayerLightDash) &&
        Player.Input.IsDown(Player.InputActionType.CameraGaze) &&
        Player.Input.IsDown(Player.InputActionType.PlayerLeftStep) &&
        Player.Input.IsDown(Player.InputActionType.PlayerRightStep)))
    {
        _isInputBuffered = true;
        _inputTimer = isMinusKeyDown ? _inputTimerThreshold : _inputTimer + Time.GetDeltaTime();
    }
    else
    {
        _isInputBuffered = false;
        _isRecentRespawn = false;
    }

    if (_isRecentRespawn)
        _inputTimer = 0.0f;

    if (_inputTimer >= _inputTimerThreshold)
    {
        Player.Effect.PlayEffect("CheckpointEffect", "ef_ob_seed01_powerseed01_sonicbuff01");
        Player.Sound.PlaySound("obj_pointmarker");
        
        _checkpointPosition = out_pKinematics->Position;
        _checkpointRotation = out_pKinematics->Rotation;

        _isRecentRespawn = true;
    }
    else if (isPlusKeyDown || (_inputTimer > 0.0f && !_isInputBuffered))
    {
        _inputTimer = 0.0f;

        if (_checkpointPosition == Vector3.Zero && _checkpointRotation == Quaternion.Identity)
            return;
        
        if (!isPlusKeyDown)
        {
            Player.Effect.PlayEffect("WarpEffect", "ef_ob_portalgate_out01");
            Player.Sound.PlaySound("sn_sonic_boom");
        }

        out_pKinematics->Position = _checkpointPosition;
        out_pKinematics->Rotation = _checkpointRotation;
    }
}