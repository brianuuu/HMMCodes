Code "Rail Dash" in "Gameplay/Skills" by "Hyper" does
/*
Allows the player to perform a Drop Dash or hold a Spin Dash on grind rails.

Notes;
- It is recommended to use this with the "Retain Horizontal Velocity from Jump" code.
- The longer you hold a Drop Dash or the more you charge a Spin Dash before landing on a grind rail, the more initial boost speed and time you will be rewarded once you start grinding.
- This is affected by gravity, allowing the player to get a slight increase in speed when a grind rail is going down.
*/
//
    #include "BlackboardStatus" noemit
    
    #lib "DeltaTime"
    #lib "GameMode"
    #lib "Globals"
    #lib "HMM"
    #lib "Lua"
    #lib "MathHelpers"
    #lib "Memory"
    #lib "Player"
    #lib "VectorHelpers"

    #import "GOComponents"
    #import "States"

    #load "System.Numerics.dll"

    using System.Numerics;

    static bool _isInitialised = false;
    static bool _isPowerBoostEffectsHidden = false;
    static bool _isHomingFromGrind = false;
    static bool _isDashCharged = false;
    static bool _isSpinBoostAnimThresholdReached = false;
    static bool _isLandAnimThresholdReached = false;

    static int _boostSfxHandle = 0;
    static int _spinBoostSfxHandle = 0;

    static int _chargeCount = 1;
    static float _chargeTimer = 0.0f;
    static float _chargeTimerThreshold = 0.25f;

    static float _dashSpeed = 5.0f;
    static float _dashMagnitudeMax = 85.0f;
    static float _dashMultiplier = 1.0f;
    static float _dashChargeMultiplier = 0.05f;

    static float _releaseTimer = 0.0f;
    static float _releaseTimerSpinBoostAnimThreshold = 0.4f;
    static float _releaseTimerLandAnimThreshold = 0.6f;
    static float _releaseTimerThreshold = 1.2f;
    static float _releaseTimerThresholdMultiplier = 1.0f;

    static float GetDashSpeed()
    {
        return _dashSpeed * (_dashMultiplier + _dashChargeMultiplier * _chargeCount);
    }

    static float GetReleaseTimerThreshold()
    {
        return _releaseTimerThreshold * (_releaseTimerThresholdMultiplier + _dashChargeMultiplier * _chargeCount)
    }

    static void IncrementChargeCountByTime()
    {
        _chargeTimer += DeltaTime.GetDeltaTime();

        if (_chargeTimer > _chargeTimerThreshold)
        {
            _chargeCount++;
            _chargeTimer = 0.0f;
        }
    }

    static void StopEffects()
    {
        if (_boostSfxHandle != 0)
        {
            fixed (int* p_boostSfxHandle = &_boostSfxHandle)
                Player.Sound.StopSound(p_boostSfxHandle);
        }

        if (_spinBoostSfxHandle != 0)
        {
            fixed (int* p_spinBoostSfxHandle = &_spinBoostSfxHandle)
                Player.Sound.StopSound(p_spinBoostSfxHandle);

            Player.Effect.StopAnimationEffects();
            Player.Effect.StopEffect("RailDashBoostImpact");
            Player.Effect.StopEffect("RailDashGrindSparks");
            Player.Effect.StopEffect("RailDashTrail01");
            Player.Effect.StopEffect("RailDashTrail02");
        }

        _boostSfxHandle = 0;
        _spinBoostSfxHandle = 0;
        _isSpinBoostAnimThresholdReached = false;
        _isLandAnimThresholdReached = false;
    }

    static void ResetMembers()
    {
        StopEffects();

        _chargeCount = 1;
        _chargeTimer = 0.0f;
        _releaseTimer = 0.0f;
    }
//
{
    if (!_isInitialised)
    {
        Globals.Add("Rail Dash", true);
        
        _isPowerBoostEffectsHidden = HMM.GetCodes().Contains("Graphics/Effects/Hide Power Boost Effects");
        _isInitialised = true;
    }

    if (!Globals.GetFlag("Rail Dash"))
        return;

    Lua.Call("LoadLevel", "warship01");

    var state = Player.State.GetCurrentStateID<Sonic.StateID>();
    var statePrev = Player.State.GetPreviousStateID<Sonic.StateID>();
    
    var isGrind = state == Sonic.StateID.StateGrind;
    var isGrindStep = state == Sonic.StateID.StateGrindStep;

    var isSpinDashPressed = Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom);
    var isSpinDashDown = Player.Input.IsDown(Player.InputActionType.PlayerSonicboom);

    if (Memory.TryGetPointer<StateDoubleJump>(Player.State.GetState<StateDoubleJump>(), out var out_pStateDoubleJump))
    {
        _isDashCharged = out_pStateDoubleJump->DropDashChargeTimer > 0.0f;
        IncrementChargeCountByTime();
    }
    else if (Memory.TryGetPointer<StateRecoveryJump>(Player.State.GetState<StateRecoveryJump>(), out var out_pStateRecoveryJump))
    {
        _isDashCharged = out_pStateRecoveryJump->IsDropDashCharge;
        IncrementChargeCountByTime();
    }
    else if (state is Sonic.StateID.StateSpinBoost or Sonic.StateID.StateSpinBoostCharge or Sonic.StateID.StateDropDash)
    {
        _isDashCharged = true;

        if (isSpinDashPressed)
            _chargeCount++;
    }
    else if (!(state is Sonic.StateID.StateGrind or Sonic.StateID.StateGrindStep))
    {
        _isDashCharged = false;
    }

    if (state == Sonic.StateID.StateHomingAttack && statePrev == Sonic.StateID.StateGrind)
    {
        Player.Effect.PlayAnimationEffect("SPIN");
        _isHomingFromGrind = true;
        return;
    }
    else if (_isHomingFromGrind && state != Sonic.StateID.StateHomingAttack)
    {
        Player.Effect.StopAnimationEffects();
        _isHomingFromGrind = false;
    }
    
    // Allow spin dashing on rails.
    if (!_isDashCharged && isGrind && isSpinDashPressed)
        _isDashCharged = true;
    
    if (_isDashCharged)
    {
        if (isGrind)
        {
            if (_spinBoostSfxHandle == 0)
            {
                _spinBoostSfxHandle = Player.Sound.PlaySound("sn_spinboost");
                
                /* Play intro effects only when the timer is at
                   zero to prevent rail switching from using them. */
                if (_releaseTimer <= 0.0f)
                {
                    _boostSfxHandle = Player.Sound.PlaySound("sn_boost_run");

                    Player.Effect.PlayAnimationEffect("SPINBOOST");
                    Player.Effect.PlayEffect("RailDashBoostImpact", "ef_so_boost_impact_fv01");

                    var isPowerBoost = IS_WORLD_FLAG(IsPowerBoost) || IS_WORLD_FLAG(IsCyberSpacePowerBoost);

                    if (!_isPowerBoostEffectsHidden && isPowerBoost && Player.GetPlayerType() == Player.PlayerType.Sonic)
                    {
                        Player.Effect.PlayEffect("RailDashTrail01", "ec_ft_pow_dash_ge01_blue_line01");
                        Player.Effect.PlayEffect("RailDashTrail02", "ec_ft_pow_dash_ge01_lightning_line01");
                    }
                }

                Player.Effect.PlayEffect("RailDashGrindSparks", "ef_mbo_warship01_accelplayer02");
            }
            
            if (!isSpinDashDown)
            {
                _releaseTimer += DeltaTime.GetDeltaTime();

                // End spin boost effects.
                if (_releaseTimer > _releaseTimerSpinBoostAnimThreshold)
                {
                    if (!_isSpinBoostAnimThresholdReached)
                    {
                        Player.Effect.StopAnimationEffects();

                        Player.Animation.SetAnimation("BALL_MOVE");
                        Player.Animation.SetAnimationParameter("SPEED", 1.25f);

                        _isSpinBoostAnimThresholdReached = true;
                    }
                }

                // Restore grinding animation.
                if (_releaseTimer > _releaseTimerLandAnimThreshold)
                {
                    if (!_isLandAnimThresholdReached)
                    {
                        Player.Animation.SetAnimation("GRIND_LAND");

                        _isLandAnimThresholdReached = true;
                    }
                }
            }
            else if (isSpinDashPressed)
            {
                // Player tried spin dashing during exit animation, so re-enter spin dash.
                if (_releaseTimer >= _releaseTimerSpinBoostAnimThreshold)
                {
                    ResetMembers();
                    return;
                }
            }
            
            if (_releaseTimer < GetReleaseTimerThreshold())
            {
                if (Memory.TryGetPointer<GOCPlayerKinematicParams>(Player.Kinematics.Get(), out var out_pKinematics))
                {
                    var magnitude = Player.Kinematics.GetMagnitude();
                    var slopeFactor = Vector3.Dot(Player.Kinematics.GetForward(), Vector3.UnitY);
                    var speedMultiplier = MathHelpers.Lerp(1.0f, slopeFactor > 0.0f ? 0.25f : 1.25f, Math.Abs(slopeFactor));

                    out_pKinematics->Velocity += Player.Kinematics.GetForward() * (GetDashSpeed() * speedMultiplier);

                    // Limit velocity since grind boosters cause this to go haywire.
                    if (magnitude > _dashMagnitudeMax)
                        out_pKinematics->Velocity *= _dashMagnitudeMax / magnitude;
                }
            }
            else
            {
                StopEffects();

                _isDashCharged = false;
            }
        }
        else if (isGrindStep)
        {
            StopEffects();

            if (isSpinDashDown)
            {
                ResetMembers();
            }
            else
            {
                /* Set release timer to the land anim threshold,
                   so the grind step state doesn't activate the
                   animations.
                   
                   This comes with a slight penalty to the bonus
                   boost time when switching rails, but that's fine. */
                if (_releaseTimer < _releaseTimerLandAnimThreshold)
                    _releaseTimer = _releaseTimerLandAnimThreshold;
            }
        }
    }
    else
    {
        ResetMembers();
    }
}