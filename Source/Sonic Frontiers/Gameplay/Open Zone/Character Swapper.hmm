Code "Character Swapper" in "Gameplay/Open Zone" by "Hyper, Skyth & Gordon Ramsay" does
/*
Allows switching between Sonic, Amy, Knuckles and Tails using hotkeys.

Controller Layout;
- RS + D-Pad Up - switch to Sonic
- RS + D-Pad Right - switch to Amy
- RS + D-Pad Down - switch to Knuckles
- RS + D-Pad Left - switch to Tails

Keyboard Layout;
- 1 - switch to Sonic
- 2 - switch to Amy
- 3 - switch to Knuckles
- 4 - switch to Tails

Notes;
- Whilst the other characters may share states with Sonic, there is still opportunity for the game to crash when using some of Sonic's gimmicks as the other characters.
- Keep your expectations within reason; don't expect guardians outside of Another Story to work 100% correctly as the other characters, especially event-driven ones like Shark.
*/
//
    #include "BlackboardStatus" noemit

    #lib "BlackboardItem"
    #lib "MathHelpers"
    #lib "PhotoMode"
    #lib "Player"
    #lib "Win32"
    #lib "XInput"

    static bool _isCharacterUpdate = false;
    static bool _isAwaitPlayerInit = false;

    static Player.PlayerType _currentPlayer = Player.PlayerType.Unknown;

    static int _lastRingCount = 0;

    static bool IsKeyDown(Keys in_keys)
    {
        return (GetAsyncKeyState(in_keys) & 0x8000) != 0;
    }
    
    static bool IsButtonDownSpecial(XInput.Buttons buttons)
    {
        if (!XInput.IsButtonDown(XInput.Buttons.RIGHT_THUMB))
            return false;

        return XInput.IsButtonDown(buttons);
    }
//
{
    if (!Win32.IsGameForegroundWindow())
        return;

    if (IS_WORLD_FLAG(IsCyberSpace))
        return;

    if (PhotoMode.IsEnabled())
        return;

    if (_currentPlayer != Player.GetPlayerType())
        _currentPlayer = Player.GetPlayerType();

    var pBlackboardItem = BlackboardItem.Get();

    if (pBlackboardItem == null)
        return;

    if (_isAwaitPlayerInit)
    {
        pBlackboardItem->RingCount = MathHelpers.Clamp(_lastRingCount, 0, pBlackboardItem->RingCapacity);

        if (Player.Sound.PlaySound("sn_sonic_boom") != 0)
        {
            Player.Effect.PlayEffect("SwapEffect", "ef_ob_portalgate_out01");
            _isAwaitPlayerInit = false;
        }
    }

    if (_isCharacterUpdate)
    {
        if (IsKeyDown(Keys.D1) ||
            IsKeyDown(Keys.D2) ||
            IsKeyDown(Keys.D3) ||
            IsKeyDown(Keys.D4))
        {
            return;
        }

        if (IsButtonDownSpecial(XInput.Buttons.DPAD_UP)    ||
            IsButtonDownSpecial(XInput.Buttons.DPAD_RIGHT) ||
            IsButtonDownSpecial(XInput.Buttons.DPAD_DOWN)  ||
            IsButtonDownSpecial(XInput.Buttons.DPAD_LEFT))
        {
            return;
        }

        _isCharacterUpdate = false;
    }
    
    if (IsKeyDown(Keys.D1) || IsButtonDownSpecial(XInput.Buttons.DPAD_UP))
    {
        if (_currentPlayer == Player.PlayerType.Sonic)
            return;

        _currentPlayer = Player.PlayerType.Sonic;
        _isCharacterUpdate = true;
    }

    if (IsKeyDown(Keys.D2) || IsButtonDownSpecial(XInput.Buttons.DPAD_RIGHT))
    {
        if (_currentPlayer == Player.PlayerType.Amy)
            return;
            
        _currentPlayer = Player.PlayerType.Amy;
        _isCharacterUpdate = true;
    }

    if (IsKeyDown(Keys.D3) || IsButtonDownSpecial(XInput.Buttons.DPAD_DOWN))
    {
        if (_currentPlayer == Player.PlayerType.Knuckles)
            return;
            
        _currentPlayer = Player.PlayerType.Knuckles;
        _isCharacterUpdate = true;
    }

    if (IsKeyDown(Keys.D4) || IsButtonDownSpecial(XInput.Buttons.DPAD_LEFT))
    {
        if (_currentPlayer == Player.PlayerType.Tails)
            return;
            
        _currentPlayer = Player.PlayerType.Tails;
        _isCharacterUpdate = true;
    }

    if (_isCharacterUpdate)
    {
        Player.SetPlayerType(_currentPlayer);
        _lastRingCount = pBlackboardItem->RingCount;
        _isAwaitPlayerInit = true;
    }
}