Library "GOComponents" by "Hyper"
{
    #lib "GameObject"
    #lib "Helpers"

    #import "States"

    #load "System.Numerics.dll"
    
    using System.Numerics;
    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `hh::game::GOComponent`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x80)]
    public struct GOComponent
    {
        /// <summary>
        /// A pointer to an instance of `hh::game::GameObject` acting as the parent of this component.
        /// </summary>
        [FieldOffset(0x28)] public GameObject.Data* pGameObject;

        /// <summary>
        /// A pointer to an instance of `GOComponentStaticClass`.
        /// </summary>
        [FieldOffset(0x48)] public GOComponentStaticClass* pStaticClass;
    }

    /// <summary>
    /// A struct representation of the static class for storing information about a game object component.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct GOComponentStaticClass
    {
        /// <summary>
        /// The name of this game object component.
        /// </summary>
        [FieldOffset(0)] public Helpers.UnmanagedString Name;

        public override string ToString() => Name.ToString();
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerHsm`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x170)]
    public struct GOCPlayerHsm
    {
        [FieldOffset(0)]    public GOComponent Base;
        
        /// <summary>
        /// A pointer to an instance of `hh::ut::HsmBase`.
        /// </summary>
        [FieldOffset(0x88)]  public HsmBase Hsm;

        /// <summary>
        /// The current state ID.
        /// </summary>
        [FieldOffset(0x114)] public int StateID;

        /// <summary>
        /// The current state's parent ID.
        /// </summary>
        [FieldOffset(0x118)] public int ParentStateID;

        /// <summary>
        /// Gets the current state ID.
        /// </summary>
        /// <returns>The current state ID.</returns>
        public int GetStateID()
        {
            if (Hsm.Base.CurrentStateIndex != 0)
                return Hsm.Base.States[Hsm.Base.CurrentStateIndex - 1].pData->StateID;

            return -1;
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerKinematicParams`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x5E0, Pack = 0x10)]
    public struct GOCPlayerKinematicParams
    {
        [FieldOffset(0)]     public GOComponent Base;
        
        /// <summary>
        /// The current position of the player.
        /// </summary>
        [FieldOffset(0x80)]  public Vector3 Position;

        /// <summary>
        /// The current rotation of the player.
        /// </summary>
        [FieldOffset(0x90)]  public Quaternion Rotation;

        /// <summary>
        /// The current velocity of the player.
        /// </summary>
        [FieldOffset(0xD0)]  public Vector3 Velocity;

        [FieldOffset(0x130)] public Vector3 WorldInput;
        
        /// <summary>
        /// Bit flags for kinematics.
        /// </summary>
        [FieldOffset(0x1C4)] public KinematicsFlags Flags;

        /// <summary>
        /// An enum containing known flags for player kinematics.
        /// </summary>
        [Flags]
        public enum KinematicsFlags : byte
        {
            /// <summary>
            /// The player is not on the ground.
            /// </summary>
            IsUngrounded = 2
        }
    }

    /// <summary>
    /// A struct representation of `app::player::GOCPlayerParameter`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x198)]
    public struct GOCPlayerParameter
    {
        [FieldOffset(0)]    public GOComponent Base;
        
        /// <summary>
        /// The current mode package type.
        /// </summary>
        [FieldOffset(0xB0)] public ModePackageType CurrentModePackageType;

        /// <summary>
        /// An enum containing the different mode package types from the player's reflection data.
        /// </summary>
        public enum ModePackageType : int
        {
            /// <summary>
            /// The player is in 3D.
            /// </summary>
            ForwardView,

            /// <summary>
            /// The player is in 2D.
            /// </summary>
            SideView,

            /// <summary>
            /// The player is fighting a boss.
            /// </summary>
            Boss,

            /// <summary>
            /// The player is in White Space.
            /// </summary>
            WhiteSpace
        }
    }
    
    /// <summary>
    /// A struct representation of `hh::ui::GOCSprite`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x230)]
    public struct GOCSprite
    {
        [FieldOffset(0)]     public GOComponent Base;

        /// <summary>
        /// A pointer to an instance of `hh::ui::GOCSprite::Renderable`.
        /// </summary>
        [FieldOffset(0x178)] public Renderable* pRenderable;
        
        /// <summary>
        /// Bit flags for the sprite state.
        /// </summary>
        [FieldOffset(0x180)] public byte Flags;

        /// <summary>
        /// A struct representation of `hh::ui::GOCSprite::Renderable`.
        /// </summary>
        [StructLayout(LayoutKind.Explicit, Size = 0x58)]
        public struct Renderable
        {
            /// <summary>
            /// The name of this renderable.
            /// </summary>
            [FieldOffset(0x38)] public Helpers.UnmanagedString Name;

            /// <summary>
            /// A pointer to an instance of `hh::ui::GOCSprite` acting as the parent of this object.
            /// </summary>
            [FieldOffset(0x50)] public GOCSprite* pGOCSprite;
        }
    }
}