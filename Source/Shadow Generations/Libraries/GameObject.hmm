Library "GameObject" by "Hyper, ĐeäTh & Sajid" 
{
    #include "Helpers" noemit
    
    #import "Collections"
    #import "GOComponents"

    #lib "Helpers"
    #lib "GameManager"
    #lib "Memory"

    using System.Runtime.InteropServices;

    /// <summary>
    /// A struct representation of `hh::game::GameObject`.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, Size = 0x258, Pack = 0x10)]
    public struct Data
    {
        /// <summary>
        /// The flags for this game object.
        /// </summary>
        [FieldOffset(0x30)] public byte Flags;

        /// <summary>
        /// A pointer to an instance of `app::GameManager`.
        /// </summary>
        [FieldOffset(0x48)] public GameManager.Data* pGameManager;

        /// <summary>
        /// An array of pointers to `hh::game::GOComponent` instances.
        /// </summary>
        [FieldOffset(0x58)] public ObjectMoveArray<Memory.Pointer<GOComponent>> Components;

        /// <summary>
        /// The name of this game object.
        /// </summary>
        [FieldOffset(0xB8)] public Helpers.UnmanagedString Name;

        public override string ToString() => Name.ToString();

        /// <summary>
        /// Destroys this game object.
        /// </summary>
        public void Kill()
        {
            Flags |= 1;
        }

        public GOComponent* GetGOC(string in_name)
        {
            for (int i = 0; i < Components.Length; i++)
            {
                var pComponent = Components[i].pData;
                
                if (pComponent->pStaticClass->Name == in_name)
                    return pComponent;
            }

            return null;
        }

        MAKE_GENERIC_API(GetGOC)
    }
}